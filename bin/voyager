#!/usr/bin/env node

var inquirer = require('inquirer')
  , child_process = require('child_process')
  , fs = require('graceful-fs')
  , path = require('path')
  , Pinwheel = require('pinwheel')()
  , Promise = require('es6-promise').Promise
  , vfs = require('vinyl-fs')

  , args = Array.prototype.slice.call(process.argv, 2)
  , j = path.join
  , questions = [{
      type: 'input'
    , name: 'name'
    , message: 'Project name'
    , default: args[0] || path.basename(process.cwd())
    }, {
      type: 'input'
    , name: 'version'
    , message: 'Version'
    , default: '0.0.0'
    }, {
      type: 'input'
    , name: 'description'
    , message: 'Description'
    }, {
      type: 'confirm'
    , name: 'private'
    , message: 'Private?'
    , default: true
    }, {
      type: 'input'
    , name: 'license'
    , message: 'License'
    , default: 'ISC'
    }]
  , settings
  , wheel = new Pinwheel('Building...')
  , CWD = process.cwd()
  , BASE = args[0] ? j(CWD, args[0]) : CWD;

function build() {
  wheel.start();
  writePackage()
    .then(buildSkeleton)
    .then(seed)
    .then(function () {
      wheel.stop();
    })
    ['catch'](function (err) {
      wheel.stop(err);
      console.log(err);
    });
}

function buildSkeleton() {
  return new Promise(function (done, fail) {
    fs.mkdirSync(BASE + '/tasks');
    fs.mkdir(BASE + '/src', function (err) {
      if (err) return fail(err);
      fs.mkdirSync(BASE + '/src/fonts');
      fs.mkdirSync(BASE + '/src/images');
      fs.mkdirSync(BASE + '/src/javascripts');
      fs.mkdirSync(BASE + '/src/javascripts/lib');
      fs.mkdirSync(BASE + '/src/javascripts/vendor');
      fs.mkdirSync(BASE + '/src/stylesheets');
      fs.mkdirSync(BASE + '/src/stylesheets/lib');
      fs.mkdirSync(BASE + '/src/stylesheets/vendor');
      done();
    });
  });
}

function finish(answers) {
  inquirer.prompt([{
    type: 'confirm'
  , name: 'ok'
  , message: JSON.stringify(answers, null, 2) + '\nDoes this look right?'
  , default: true
  }], function (answer) {
    if (answer.ok) {
      settings = answers;
      build();
    }
  });
}

function seed() {
  return Promise.all([
    new Promise(function (done, fail) {
      vfs.src([j(__dirname, '../support/images/**')])
        .pipe(vfs.dest(j(BASE, '/src/images')))
        .on('error', fail)
        .on('end', done);
    })
  , new Promise(function (done, fail) {
      vfs.src([j(__dirname, '../support/javascripts/**/*.js')])
        .pipe(vfs.dest(j(BASE, '/src/javascripts')))
        .on('error', fail)
        .on('end', done);
    })
  , new Promise(function (done, fail) {
      vfs.src([j(__dirname, '../support/bin/cmd')])
        .pipe(vfs.dest(j(BASE, '/bin')))
        .on('error', fail)
        .on('end', done);
    })
  , new Promise(function (done, fail) {
      vfs.src([j(__dirname, '../support/stylesheets/**')])
        .pipe(vfs.dest(j(BASE, '/src/stylesheets')))
        .on('error', fail)
        .on('end', done);
    })
  , new Promise(function (done, fail) {
      vfs.src([
          j(__dirname, '../support/.jshintrc')
        , j(__dirname, '../support/index.html')
        , j(__dirname, '../support/*.txt')
        , j(__dirname, '../support/favicon.ico')
        , j(__dirname, '../support/apple-touch-icon-precomposed.png')
        ])
        .pipe(vfs.dest(j(BASE, '/src')))
        .on('error', fail)
        .on('end', done);
    })
  ]);
}

function writePackage() {
  return new Promise(function (done, fail) {
    if (args[0]) fs.mkdirSync(BASE);
    settings.scripts = { 
      start: './bin/cmd start'
    , build: './bin/cmd build'
    , clean: './bin/cmd clean'
    };
    settings.devDependencies = { voyager: '^0.3.0'};
    fs.writeFile(j(BASE, '/package.json'), JSON.stringify(settings, null, 2), function (err) {
      if (err) return fail(err);
      done();
    });
  });
}

inquirer.prompt(questions, function (answers) {
  fs.readdir(BASE, function (err, files) {
    if (files && files.length) {
      inquirer.prompt([{
        type: 'confirm'
      , name: 'nonempty'
      , message: 'WARNING: The directory ' + BASE + ' is not empty, do you wish to continue?'
      , default: false
      }], function (answer) {
        if (answer.nonempty) {
          finish();
        }
      });
    } else {
      finish(answers);
    }
  });  
});
